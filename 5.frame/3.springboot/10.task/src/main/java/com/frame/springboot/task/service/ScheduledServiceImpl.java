package com.frame.springboot.task.service;

import com.basic.comon.Constant;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

/**
 * @Author: railgun
 * 2021/6/27 21:51
 * PS: 异步任务
 * 秒        0-59    , - * /     【x,y 枚举 x y 触发】【x-y x 到 y 之间每秒触发】【* 每秒触发】【5/4 从第5秒开始，每4秒触发一次】【下同】
 * 分        0-59    , - * /
 * 时        0-23    , - * /
 * 日        1-31    , - * /
 * 月        1-12    , - * /
 * 星期几    1-7    , - * /        【周日到周六】
 * 年        1970-2099    , - * /
 * 注意：? 在表达式中必定存在。日域定义具体数值，周域必须是 ?。周域定义具体数值，日域必须是 ?。
 * 【原因：避免模糊不清的定义 0 39 10 5 * 3 有两个含义 1、每月的 5 号 2、每月的周三；（当该月的 5 号不是周三的时候）；那判断的时候这两个条件是且还是与，产生了模糊的定义 】
 * 特殊含义解释
 * *：   可用在所有字段中，表示对应时间域的每一个时刻，例如，*在分钟字段时，表示“每分钟”；
 * ?：   只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样
 * -：   表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；
 * ,：   表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；
 * /：　  x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用* /y，它等同于0/y；
 * L:　  该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；如果L用在星期中，则表示星期六，等同于7。但是，如果L出现在星期字段里，而且在前面有一个数值 X，则表示“这个月的最后X天”，例如，6L表示该月的最后星期五；
 * W:   该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期，而不能指定日期范围；
 * LW组合：    在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；
 * #：   该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；
 * C：   该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。
 **/
@Service
public class ScheduledServiceImpl implements ScheduledService {

    /**
     * railgun
     * 2021/6/27 21:52
     * PS: 每秒执行一次
     **/
    @Scheduled(cron = "* * * * * ?")
    @Override
    public void hello() {
        System.out.println(Constant.SLOGAN);
    }

}
